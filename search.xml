<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TypeScript全面进阶</title>
      <link href="/gavin-blog.github.io/post/9c2c0518.html"/>
      <url>/gavin-blog.github.io/post/9c2c0518.html</url>
      
        <content type="html"><![CDATA[<h4 id="TypeScript-全面进阶"><a href="#TypeScript-全面进阶" class="headerlink" title="TypeScript 全面进阶"></a>TypeScript 全面进阶</h4><h5 id="认知"><a href="#认知" class="headerlink" title="认知"></a>认知</h5><p>JavaScript 一直以灵活性著称。在实际开发时，我不需要确定一个变量的类型，就能直接访问可能并不存在的属性，所以无需为每一步操作都定义类型。在小型项目中，这种灵活性可以有效提高开发效率，帮助我们掌控全局。</p><p>但随着项目规模的增大，这些变量类型的数量也会成倍增加，总有记错、遗漏的时候。此时，灵活性就变成了埋在项目内的定时炸弹。在《<a href="https://link.juejin.cn/?target=https%3A%2F%2Frollbar.com%2Fblog%2Ftop-10-javascript-errors%2F">Top 10 JavaScript errors from 1000+ projects</a>》 中，最常见的错误就是 <code>Cannot read property &#39;xxx&#39; of undefined</code>、<code>undefined is not a function</code> 等。这些错误就是过度依赖灵活性的后果，一旦它们被触发，就会导致你的页面白屏、卡死，甚至崩溃.</p>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GeoJSON的解析和渲染</title>
      <link href="/gavin-blog.github.io/post/f7d6eb05.html"/>
      <url>/gavin-blog.github.io/post/f7d6eb05.html</url>
      
        <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><div class="note simple"><p>使用 <strong>Cesium</strong> 高效加载并渲染 <mark class="hl-label green">GeoJSON</mark>  ：实现多种渲染方式分级、唯一值和单一符号.</p></div><h4 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h4><ul><li>上传 shp</li><li>上传 GeoJson</li><li>上传 CAD</li><li>工作空间生成的缓冲区</li></ul><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><!-- http://cesium.xin/cesium/cn/Documentation1.62/GeoJsonDataSource.html?classFilter=GeoJsonDataSource --><p>cesium 加载 GeoJSON 数据有自带的接口 <a href="https://cesium.com/learn/cesiumjs/ref-doc/GeoJsonDataSource.html">GeoJsonDataSource</a> 和演示示例,使用的是 <strong>entity</strong> 方式来加载数据,而 <strong>entity</strong> 封装的是 <strong>primitive</strong>,所以想用原生的 <strong>primitive</strong> 方式来加载 GeoJSON 数据试试.</p><h4 id="方式-GeoJsonDataSource"><a href="#方式-GeoJsonDataSource" class="headerlink" title="方式: GeoJsonDataSource"></a>方式: GeoJsonDataSource</h4><mark class="hl-label blue">codeDemo</mark> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dataSourceGeo = <span class="keyword">await</span> <span class="title class_">Cesium</span>.<span class="property">GeoJsonDataSource</span>.<span class="title function_">load</span>(</span><br><span class="line">  <span class="string">&quot;https://geojson.cn/api/data/china.topo.json&quot;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">stroke</span>: <span class="title class_">Cesium</span>.<span class="property">Color</span>.<span class="property">HOTPINK</span>,</span><br><span class="line">    <span class="attr">fill</span>: <span class="title class_">Cesium</span>.<span class="property">Color</span>.<span class="property">PINK</span>.<span class="title function_">withAlpha</span>(<span class="number">0.5</span>),</span><br><span class="line">    <span class="attr">strokeWidth</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">markerSymbol</span>: <span class="string">&quot;?&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line">viewer.<span class="property">dataSources</span>.<span class="title function_">add</span>(dataSourceGeo);</span><br><span class="line">viewer.<span class="title function_">zoomTo</span>(dataSourceGeo);</span><br><span class="line"><span class="comment">// 在数据加载完成后，遍历所有的 entities</span></span><br><span class="line"><span class="comment">// 要对不同的几何类型做不同的处理</span></span><br><span class="line">dataSourceGeo.<span class="property">entities</span>.<span class="property">values</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">entity: any</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = entity.<span class="property">properties</span>.<span class="property">name</span>.<span class="title function_">getValue</span>();</span><br><span class="line">  <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;四川&quot;</span>:</span><br><span class="line">      entity.<span class="property">polygon</span>.<span class="property">material</span> = <span class="title class_">Cesium</span>.<span class="property">Color</span>.<span class="property">RED</span>.<span class="title function_">withAlpha</span>(<span class="number">0.6</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;RegionB&quot;</span>:</span><br><span class="line">      entity.<span class="property">polygon</span>.<span class="property">material</span> = <span class="title class_">Cesium</span>.<span class="property">Color</span>.<span class="property">BLUE</span>.<span class="title function_">withAlpha</span>(<span class="number">0.6</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      entity.<span class="property">polygon</span>.<span class="property">material</span> = <span class="title class_">Cesium</span>.<span class="property">Color</span>.<span class="property">GREEN</span>.<span class="title function_">withAlpha</span>(<span class="number">0.6</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  entity.<span class="property">polygon</span>.<span class="property">outline</span> = <span class="literal">true</span>;</span><br><span class="line">  entity.<span class="property">polygon</span>.<span class="property">outlineColor</span> = <span class="title class_">Cesium</span>.<span class="property">Color</span>.<span class="property">BLACK</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>更多 geojson 数据示例<a href="https://geojson.cn">geojson.cn</a></p><details class="toggle" style="border: 1px solid #2C2C2C"><summary class="toggle-button" style="background-color: #2C2C2C;color: white">查看图片</summary><div class="toggle-content"><div class="img-wrap"><div class="img-bg"><img class="img" src="/gavin-blog.github.io/img/gis/geojson/geojsonDataSource.png"/></div></div></div></details><div class="note simple"><p>提供了一个更高级的抽象,专为简化 GeoJSON 数据的加载和显示,只需要几行代码,就可以加载一个 GeoJSON 文件,并自动将其转换为实体 (Entities) 用于显示,非常易用和直观.</p></div><h4 id="方式-primitive"><a href="#方式-primitive" class="headerlink" title="方式: primitive"></a>方式: primitive</h4><p>使用 Primitive 加载 GeoJSON 数据,需要进行更多的底层操作.因为 Cesium.GeoJsonDataSource 是为了简化这一过程而设计的,但如果希望更细粒度地控制渲染过程,或者优化性能,使用 Primitive 可能是一个好选择.</p><mark class="hl-label blue">codeDemo</mark> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">GeometryInstance</span>(&#123;</span><br><span class="line">  <span class="attr">geometry</span>: <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">EllipseGeometry</span>(&#123;</span><br><span class="line">    <span class="attr">center</span>: <span class="title class_">Cesium</span>.<span class="property">Cartesian3</span>.<span class="title function_">fromDegrees</span>(-<span class="number">100.0</span>, <span class="number">20.0</span>),</span><br><span class="line">    <span class="attr">semiMinorAxis</span>: <span class="number">500000.0</span>,</span><br><span class="line">    <span class="attr">semiMajorAxis</span>: <span class="number">1000000.0</span>,</span><br><span class="line">    <span class="attr">rotation</span>: <span class="title class_">Cesium</span>.<span class="property">Math</span>.<span class="property">PI_OVER_FOUR</span>,</span><br><span class="line">    <span class="attr">vertexFormat</span>: <span class="title class_">Cesium</span>.<span class="property">VertexFormat</span>.<span class="property">POSITION_AND_ST</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&quot;object returned when this instance is picked and to get/set per-instance attributes&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line">viewer.<span class="property">scene</span>.<span class="property">primitives</span>.<span class="title function_">add</span>(</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Primitive</span>(&#123;</span><br><span class="line">    <span class="attr">geometryInstances</span>: instance,</span><br><span class="line">    <span class="attr">appearance</span>: <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">EllipsoidSurfaceAppearance</span>(&#123;</span><br><span class="line">      <span class="attr">material</span>: <span class="title class_">Cesium</span>.<span class="property">Material</span>.<span class="title function_">fromType</span>(<span class="string">&quot;Checkerboard&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>更多<a href="https://cesium.com/learn/cesiumjs/ref-doc/GeometryInstance.html?classFilter=GeometryInstance">GeometryInstance</a>可在官网查看</p><details class="toggle" style="border: 1px solid #2C2C2C"><summary class="toggle-button" style="background-color: #2C2C2C;color: white">查看图片</summary><div class="toggle-content"><div class="img-wrap"><div class="img-bg"><img class="img" src="/gavin-blog.github.io/img/gis/geojson/primitive.jpg" alt="示例加载一个椭圆"/></div><span class="image-caption">示例加载一个椭圆</span></div></div></details><div class="note simple"><p>更低级的方式,需要手动解析 GeoJSON 数据并创建相应的 primitives 来显示这些数据.涉及更多的代码和更复杂的设置.<br>提供了极高的灵活性和控制权,可以精细地控制每一个渲染的细节和优化,以满足特定需求或解决性能问题.<br>更好的扩展性.</p></div><h3 id="Geojson-的解析"><a href="#Geojson-的解析" class="headerlink" title="Geojson 的解析"></a>Geojson 的解析</h3><h4 id="万能的-JSON-parse"><a href="#万能的-JSON-parse" class="headerlink" title="万能的 JSON.parse"></a>万能的 JSON.parse</h4><ul><li><p>错误处理：如果传递给 JSON.parse() 的字符串不是有效的 JSON，它会抛出一个错误。因此，在解析来自不可靠源的 JSON 时，最好使用 try…catch 来处理可能的错误。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonString = <span class="string">`</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  // 这是一个注释，标准的JSON不支持注释</span></span><br><span class="line"><span class="string">  &quot;unquotedKey&quot;: &#x27;value&#x27;,  // 对象的键必须使用双引号，但这里的值使用了单引号</span></span><br><span class="line"><span class="string">  &quot;singleQuotedKey&quot;: &#x27;value&#x27;,</span></span><br><span class="line"><span class="string">  &quot;trailingComma&quot;: &#x27;yes&#x27;,  // 这个键后面有一个尾随逗号</span></span><br><span class="line"><span class="string">  &quot;hexadecimal&quot;: 0xDEADBEEF, // 十六进制数值</span></span><br><span class="line"><span class="string">  &quot;leadingDecimalPoint&quot;: .8675309, // 以小数点开头的数值</span></span><br><span class="line"><span class="string">  &quot;positiveSign&quot;: +1, // 带有正号的数值</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">let</span> jsonObject;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  jsonObject = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonString);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error parsing JSON:&quot;</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果想要JSON.parse可以解析</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="string">`</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;unquotedKey&quot;: &quot;value&quot;,</span></span><br><span class="line"><span class="string">  &quot;singleQuotedKey&quot;: &quot;value&quot;,</span></span><br><span class="line"><span class="string">  &quot;trailingComma&quot;: &quot;yes&quot;,</span></span><br><span class="line"><span class="string">  &quot;hexadecimal&quot;: 3735928559,</span></span><br><span class="line"><span class="string">  &quot;leadingDecimalPoint&quot;: 0.8675309,</span></span><br><span class="line"><span class="string">  &quot;positiveSign&quot;: 1</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure></li><li><p>性能：对于非常大的数据，JSON.parse() 可能会消耗大量的内存和 CPU 资源。在这种情况下，可能需要考虑其他方法或库来解析大量数据。<br>JSON.parse() 仍然是一个非常有用的工具，并在许多应用程序和库中广泛使用。</p></li></ul><h4 id="JSON5-JSON-的超集"><a href="#JSON5-JSON-的超集" class="headerlink" title="JSON5-JSON 的超集"></a>JSON5-JSON 的超集</h4><h5 id="JSON5-简介"><a href="#JSON5-简介" class="headerlink" title="JSON5 简介"></a>JSON5 简介</h5><p>JSON5 是一个 JavaScript 库,它扩展了标准的 JSON 格式，使其更加灵活和友好</p><p>JSON5 的主要特点包括：</p><ul><li>注释: 可以在 JSON5 中使用单行和多行注释</li><li>尾随逗号: 允许在列表和对象中使用尾随逗号</li><li>更灵活的字符串: 可以使用单引号来定义字符串,也支持多行字符串</li><li>简化的属性名称: 如果对象的属性名称是一个有效的 JavaScript 标识符,那么可以省略引号</li><li>额外的数字格式: 支持十六进制、八进制、二进制数字，以及带有前导或尾随小数点的数字</li><li>特殊的值: 支持 Infinity、-Infinity 和 NaN.</li><li>更简洁的数组和对象: 允许在没有其他元素的情况下有尾随逗号</li><li>强大的 reviver 函数</li></ul><p>更多关于查看 <a href="https://json5.org/">JSON5</a></p><div class="note simple"><p>reviver 函数的工作方式是从最内层的属性开始,然后逐步向外层处理。对于每个键值对,它都会调用 reviver 函数。该函数有两个参数：一个是键（key）,一个是值（value,可以基于这些信息决定返回什么,如果想保留原始值,只需返回 value,如果想移除该键值对,可以返回 undefined 或者 false.<br>这使得 reviver 函数成为一个非常强大的工具,在解析 JSON5 数据时进行自定义处理.</p></div><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">JSONParseData</span> = (<span class="params">jsonString: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> obj = <span class="title class_">JSON</span>5.<span class="title function_">parse</span>(jsonString, <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> value.<span class="title function_">filter</span>(<span class="function">(<span class="params">feature</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> !(</span><br><span class="line">            feature.<span class="property">geometry</span> &amp;&amp;</span><br><span class="line">            feature.<span class="property">geometry</span>.<span class="property">coordinates</span> &amp;&amp;</span><br><span class="line">            feature.<span class="property">geometry</span>.<span class="property">coordinates</span>.<span class="title function_">includes</span>(-<span class="title class_">Infinity</span>)</span><br><span class="line">          );</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="使用-json5-解析-GeoJSON"><a href="#使用-json5-解析-GeoJSON" class="headerlink" title="使用 json5 解析 GeoJSON"></a>使用 json5 解析 GeoJSON</h3><p>有时候在 GeoJson 中可能会出现一些意外的字符串或者符号导致整个 JSON 的解析错误,所以可以考虑在某些时候(业务允许的情况下)使用功能更强大的 JSON5 来解析,可给出相应的提示,以确保功能的正常;</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&#123;\&quot;type\&quot;:\&quot;FeatureCollection\&quot;,\&quot;features\&quot;:[&#123;\&quot;type\&quot;:\&quot;Feature\&quot;,\&quot;geometry\&quot;:&#123;\&quot;type\&quot;:\&quot;Point\&quot;,\&quot;coordinates\&quot;:[35400,8000]&#125;,\&quot;properties\&quot;:&#123;\&quot;plan_year\&quot;:2023,\&quot;entity_id\&quot;:16306,\&quot;objectid\&quot;:16306,\&quot;entity_typ\&quot;:\&quot;SZJ\&quot;,\&quot;automid\&quot;:0&#125;,\&quot;id\&quot;:\&quot;水位监测井.691\&quot;&#125;,&#123;\&quot;type\&quot;:\&quot;Feature\&quot;,\&quot;geometry\&quot;:&#123;\&quot;type\&quot;:\&quot;Point\&quot;,\&quot;coordinates\&quot;:[Infinity,-Infinity]&#125;,\&quot;properties\&quot;:&#123;\&quot;plan_year\&quot;:2023,\&quot;entity_id\&quot;:16306,\&quot;objectid\&quot;:16306,\&quot;entity_typ\&quot;:\&quot;SZJ\&quot;,\&quot;automid\&quot;:0&#125;,\&quot;id\&quot;:\&quot;水位监测井.692\&quot;&#125;]&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>在 GeoJSON 数据中出现 Infinity</p><ul><li>数据源的错误：当某些地理信息系统（GIS）或其他数据源生成 GeoJSON 时，可能由于某种原因（如计算错误或数据损坏）在坐标中产生了无限大的值</li><li>计算或转换的副作用：在对地理数据进行某些计算或坐标转换时，可能会产生 Infinity,例如，在投影转换中，某些地理坐标可能会转换为无穷大的投影坐标</li><li>数据处理错误：在数据清洗、处理或转换过程中，工具或脚本可能有错误，导致了无效值</li><li>占位符使用：在某些情况下，Infinity 可能被用作一个特定的占位符，以表示某种特定的情况或值。这不是标准做法，但在某些特定的应用场景中可能会出现。</li></ul><div class="note simple"><p>使用上面封装过 reviver 函数的 JSON5.parse 方法,可直接对不符合标准的数据项移除,从而保证正确的代码或者业务逻辑</p></div><h3 id="使用-chroma-js-确定颜色"><a href="#使用-chroma-js-确定颜色" class="headerlink" title="使用 chroma-js 确定颜色"></a>使用 chroma-js 确定颜色</h3><h4 id="chroma-js-简介"><a href="#chroma-js-简介" class="headerlink" title="chroma-js 简介"></a>chroma-js 简介</h4><p>chroma-js 是一个小型的 JavaScript 库,用于所有类型的颜色转换和颜色比例操作.非常适合那些需要在前端执行颜色操作或生成颜色比例.<br>更多<a href="https://gka.github.io/chroma.js/">chroma-js </a>可在官网查看</p><ul><li>多种颜色格式的支持：它可以处理多种格式的颜色，例如 RGB、HEX、HSL、HSV、LAB、RGBA、CYMK 等</li><li>颜色转换：轻松在不同的颜色格式之间进行转换</li><li>颜色比例：可以根据需要生成颜色比例，这在创建渐变或根据数据值生成颜色时非常有用</li><li>颜色操作：chroma-js 提供了一系列的颜色操作方法，例如调整颜色的亮度、对比度、饱和度等</li><li>颜色亮度和对比：它可以帮助你确定颜色的亮度和它们之间的对比度</li><li>简单和轻量级：尽管功能强大，但 chroma-js 的 API 设计得很简单，并且库的大小也很小(约 10kb)</li><li>颜色空间插值：它允许在不同的颜色空间（例如 RGB、HSL、LAB 等）之间插值，这为颜色转换提供了更多的灵活性</li><li>预定义的颜色范围：chroma-js 包括一些预定义的颜色范围，这些范围非常适合生成颜色映射或渐变</li><li>颜色差异计算：你可以使用 chroma-js 计算两种颜色之间的视觉差异</li><li>可扩展性：虽然它的核心功能已经非常全面,但 chroma-js 仍然允许开发者进行扩展以满足特定的需求.</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">chroma.<span class="title function_">scale</span>(<span class="string">&quot;OrRd&quot;</span>).<span class="title function_">colors</span>(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// [&#x27;#fff7ec&#x27;, &#x27;#fdd49e&#x27;, &#x27;#fc8d59&#x27;, &#x27;#d7301f&#x27;, &#x27;#7f0000&#x27;]</span></span><br><span class="line">chroma.<span class="title function_">scale</span>([<span class="string">&quot;white&quot;</span>, <span class="string">&quot;black&quot;</span>]).<span class="title function_">colors</span>(<span class="number">12</span>);</span><br><span class="line"><span class="comment">//  [&#x27;#ffffff&#x27;, &#x27;#e8e8e8&#x27;, &#x27;#d1d1d1&#x27;, &#x27;#b9b9b9&#x27;, &#x27;#a2a2a2&#x27;, &#x27;#8b8b8b&#x27;, &#x27;#747474&#x27;, &#x27;#5d5d5d&#x27;, &#x27;#464646&#x27;, &#x27;#2e2e2e&#x27;, &#x27;#171717&#x27;, &#x27;#000000&#x27;]</span></span><br></pre></td></tr></table></figure><details class="toggle" style="border: 1px solid #2C2C2C"><summary class="toggle-button" style="background-color: #2C2C2C;color: white">查看图片</summary><div class="toggle-content"><div class="img-wrap"><div class="img-bg"><img class="img" src="/gavin-blog.github.io/img/gis/geojson/chroma.png" alt="示例生成scale"/></div><span class="image-caption">示例生成scale</span></div></div></details><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>上传 shp 或者 cad…,获取 geojson;</li><li>解析 geojson,使用 json5,扩展相关 geojson 或者过滤一些数据;</li><li>封装 geojson 转换 cesium 坐标方法,获取转换后的坐标;</li><li>确认渲染方式-分级、唯一值和单一符号并且提取属性;</li><li>根据渲染方式确定分段信息以及每个 feature 对应的颜色和属性;</li><li>根据 geojson 中 feature 的数量,使用 chroma 生成色带;</li><li>根据生成好的色带和转换后的 cesium 格式的 geometry,生成 primitive;</li><li>根据 feature 的类型不同,生成不同的 primitive,不同类型的 primitive,设置不同的 appearance</li><li>渲染 primitive 并且定位;</li></ol><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// primitive生成</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">generatePrimitive</span> = (<span class="params">geoIns: <span class="built_in">any</span>, color: <span class="built_in">string</span> | Color</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> geoType = <span class="title function_">getTypeByGeometryInstance</span>(geoIns);</span><br><span class="line">  <span class="keyword">const</span> appearance = <span class="title function_">getAppearanceByType</span>(geoType, color);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> chaos.<span class="property">base</span>?.<span class="property">viewer</span>.<span class="property">scene</span>.<span class="property">primitives</span>.<span class="title function_">add</span>(</span><br><span class="line">    <span class="keyword">new</span> cesium.<span class="title class_">Primitive</span>(&#123;</span><br><span class="line">      <span class="attr">geometryInstances</span>: <span class="title class_">Array</span>.<span class="title function_">isArray</span>(geoIns) ? geoIns.<span class="title function_">flat</span>() : geoIns,</span><br><span class="line">      appearance,</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 根据类型获取primitive的一些样式设置</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getAppearanceByType</span> = (<span class="params"><span class="keyword">type</span>: <span class="built_in">string</span>, color: <span class="built_in">string</span> | Color</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> defaultPolygon = <span class="keyword">new</span> cesium.<span class="title class_">EllipsoidSurfaceAppearance</span>(&#123;</span><br><span class="line">    <span class="attr">material</span>: <span class="keyword">new</span> cesium.<span class="title class_">Material</span>(&#123;</span><br><span class="line">      <span class="attr">fabric</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;Color&quot;</span>,</span><br><span class="line">        <span class="attr">uniforms</span>: &#123;</span><br><span class="line">          <span class="attr">color</span>: cesium.<span class="property">Color</span>.<span class="title function_">fromCssColorString</span>(color),</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">renderState</span>: &#123;</span><br><span class="line">      <span class="attr">depthTest</span>: &#123;</span><br><span class="line">        <span class="attr">enabled</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">aboveGround</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">asynchronous</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;MultiPolygon&quot;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;Polygon&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> defaultPolygon;</span><br><span class="line">    <span class="comment">// <span class="doctag">FIXME:</span> outline渲染</span></span><br><span class="line">    <span class="comment">// return new cesium.PerInstanceColorAppearance(&#123;</span></span><br><span class="line">    <span class="comment">//   flat: true,</span></span><br><span class="line">    <span class="comment">//   faceForward: true,</span></span><br><span class="line">    <span class="comment">//   translucent: false,</span></span><br><span class="line">    <span class="comment">//   closed: false</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;MultiLineString&quot;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;LineString&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> cesium.<span class="title class_">PolylineColorAppearance</span>(&#123;</span><br><span class="line">        <span class="attr">translucent</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;Point&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> cesium.<span class="title class_">PerInstanceColorAppearance</span>(&#123;</span><br><span class="line">        <span class="attr">closed</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">translucent</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> defaultPolygon;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 生成相应的geometry实例</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">generateGeometry</span> = (<span class="params"></span></span><br><span class="line"><span class="params">  <span class="keyword">type</span>: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  poly: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">  id: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  color?: <span class="built_in">string</span> | Color</span></span><br><span class="line"><span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 处理颜色参数-由于线，线条的颜色通常在GeometryInstance的attributes属性中定义</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">colorParams</span>: <span class="built_in">string</span> | <span class="title class_">Color</span> | <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (color) &#123;</span><br><span class="line">    colorParams = cesium.<span class="property">Color</span>.<span class="title function_">fromCssColorString</span>(color);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    colorParams = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> &#123; holes = [] &#125; = poly;</span><br><span class="line">  <span class="keyword">if</span> (holes.<span class="property">length</span>) &#123;</span><br><span class="line">    holes = holes.<span class="title function_">map</span>(<span class="function">(<span class="params">hole: <span class="built_in">any</span></span>) =&gt;</span> <span class="keyword">new</span> cesium.<span class="title class_">PolygonHierarchy</span>(hole));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置坐标偏移</span></span><br><span class="line">  <span class="keyword">const</span> offsetHoles = <span class="title function_">setCoordinateOffset</span>(chaos.<span class="property">base</span>!, holes);</span><br><span class="line">  <span class="comment">// 设置坐标偏移</span></span><br><span class="line">  <span class="keyword">const</span> offsetPositions = <span class="title function_">setCoordinateOffset</span>(chaos.<span class="property">base</span>!, poly.<span class="property">positions</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;MultiPolygon&quot;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;Polygon&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> cesium.<span class="title class_">GeometryInstance</span>(&#123;</span><br><span class="line">        id,</span><br><span class="line">        <span class="attr">geometry</span>: <span class="keyword">new</span> cesium.<span class="title class_">PolygonGeometry</span>(&#123;</span><br><span class="line">          <span class="attr">height</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">polygonHierarchy</span>: <span class="keyword">new</span> cesium.<span class="title class_">PolygonHierarchy</span>(</span><br><span class="line">            offsetPositions,</span><br><span class="line">            offsetHoles</span><br><span class="line">          ),</span><br><span class="line">          <span class="attr">vertexFormat</span>: cesium.<span class="property">EllipsoidSurfaceAppearance</span>.<span class="property">VERTEX_FORMAT</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;MultiLineString&quot;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;LineString&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> cesium.<span class="title class_">GeometryInstance</span>(&#123;</span><br><span class="line">        <span class="comment">// PolylineGeometry GroundPolylineGeometry</span></span><br><span class="line">        <span class="attr">geometry</span>: <span class="keyword">new</span> cesium.<span class="title class_">PolylineGeometry</span>(&#123;</span><br><span class="line">          <span class="attr">positions</span>: offsetPositions,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">1.0</span>,</span><br><span class="line">          <span class="attr">vertexFormat</span>: cesium.<span class="property">PolylineColorAppearance</span>.<span class="property">VERTEX_FORMAT</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="attr">attributes</span>: &#123;</span><br><span class="line">          <span class="attr">color</span>: cesium.<span class="property">ColorGeometryInstanceAttribute</span>.<span class="title function_">fromColor</span>(</span><br><span class="line">            colorParams ?? cesium.<span class="property">Color</span>.<span class="property">RED</span></span><br><span class="line">          ),</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;Point&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> cesium.<span class="title class_">GeometryInstance</span>(&#123;</span><br><span class="line">        <span class="attr">geometry</span>: <span class="keyword">new</span> cesium.<span class="title class_">CircleGeometry</span>(&#123;</span><br><span class="line">          <span class="attr">center</span>: offsetPositions[<span class="number">0</span>],</span><br><span class="line">          <span class="attr">radius</span>: <span class="number">200.0</span>,</span><br><span class="line">          <span class="attr">height</span>: <span class="number">50</span>,</span><br><span class="line">          <span class="attr">vertexFormat</span>: cesium.<span class="property">PerInstanceColorAppearance</span>.<span class="property">VERTEX_FORMAT</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="attr">attributes</span>: &#123;</span><br><span class="line">          <span class="attr">color</span>: cesium.<span class="property">ColorGeometryInstanceAttribute</span>.<span class="title function_">fromColor</span>(</span><br><span class="line">            colorParams ?? cesium.<span class="property">Color</span>.<span class="property">RED</span></span><br><span class="line">          ),</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> gis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gis </tag>
            
            <tag> GeoJSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一日游记</title>
      <link href="/gavin-blog.github.io/post/aae61326.html"/>
      <url>/gavin-blog.github.io/post/aae61326.html</url>
      
        <content type="html"><![CDATA[<div class="note icon-padding disabled"><i class="note-icon fa-solid fa-van-shuttle"></i><p>崇州是我心中的一个秘密花园，每次造访都仿佛踏入了一幅动人的山水画中。这次的游记带你领略这个迷人之地的魅力</p></div><div class="img-wrap"><div class="img-bg"><img class="img" src="/gallery/yz罨画池/1.JPG alt=对视"/></div></div><h3 id="早晨：晨雾缭绕的罨画池"><a href="#早晨：晨雾缭绕的罨画池" class="headerlink" title="早晨：晨雾缭绕的罨画池"></a>早晨：晨雾缭绕的罨画池</h3><p>清晨，当第一缕阳光照射到罨画池，我看到了晨雾中的一片宁静。薄雾像是轻纱，遮挡住了池塘深处的一切，使得罨画池更加神秘。</p><h3 id="中午：阳光下的静谧"><a href="#中午：阳光下的静谧" class="headerlink" title="中午：阳光下的静谧"></a>中午：阳光下的静谧</h3><p>太阳高挂，池水显得格外清澈。我坐在石阶上，听着水声，闭上眼睛，感受这一刻的宁静。阳光照在水面，形成闪烁的光斑，仿佛整个池塘都被点亮。</p><h3 id="下午：漫步池边"><a href="#下午：漫步池边" class="headerlink" title="下午：漫步池边"></a>下午：漫步池边</h3><p>傍晚，我选择沿着池边漫步。每一步都如踏入画中，各种植物、花卉和小动物都为这幅画添加了生命和色彩。特别是当阳光透过树梢，投射在波光粼粼的水面上，一切都显得那么和谐。</p><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div>]]></content>
      
      
      <categories>
          
          <category> 旅游 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅游 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo初体验</title>
      <link href="/gavin-blog.github.io/post/18844.html"/>
      <url>/gavin-blog.github.io/post/18844.html</url>
      
        <content type="html"><![CDATA[<p>第一次使用 <a href="https://hexo.io/">Hexo</a>! 可以到 <a href="https://hexo.io/docs/">文档</a> 查看更多信息. 可能遇见的一些问题 <a href="https://hexo.io/docs/troubleshooting.html">问题</a> 或者 Issues <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> person </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git一些操作</title>
      <link href="/gavin-blog.github.io/post/9c660524.html"/>
      <url>/gavin-blog.github.io/post/9c660524.html</url>
      
        <content type="html"><![CDATA[<h2 id="生成-tag"><a href="#生成-tag" class="headerlink" title="生成 tag"></a>生成 tag</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git tag -a v1.0 -m &quot;First release&quot; &lt;commit_sha&gt;</span><br><span class="line">git tag -l | xargs -n 1 git push --delete origin</span><br><span class="line">git tag -l | xargs git tag -d</span><br></pre></td></tr></table></figure><h2 id="清除-git-的记录"><a href="#清除-git-的记录" class="headerlink" title="清除 git 的记录"></a>清除 git 的记录</h2><ul><li>创建一个独立新分支 nb</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout --orphan nb</span><br></pre></td></tr></table></figure><p><code>参数 --orphan 作用有两个，一个是拷贝当前所在分支的所有文件，另一个是没有父结点，可以理解为没有历史记录，是一个完全独立背景干净的分支。</code></p><ul><li>把内容提交到新分支上</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure><ul><li>删除主分支 master</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -D master</span><br></pre></td></tr></table></figure><p><code>-D 等同于 --delete --force 强制删除分支。</code></p><ul><li>将当前分支 nb 重命名为 master</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -m master</span><br></pre></td></tr></table></figure><ul><li>强制 push 到远程 master 仓库</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初次见面，请多指教</title>
      <link href="/gavin-blog.github.io/post/5b81362b.html"/>
      <url>/gavin-blog.github.io/post/5b81362b.html</url>
      
        <content type="html"><![CDATA[<h3 id="初次见面，请多指教"><a href="#初次见面，请多指教" class="headerlink" title="初次见面，请多指教"></a>初次见面，请多指教</h3><div class="note icon-padding disabled"><i class="note-icon fa-solid fa-seedling"></i><p>2023 年 03 月 23 日 12 点 39 分</p></div><p>我的宝贝来到了这个世界上…<br>躺在产床上，我没有看到你刚出来的样子。听见一声奶奶的哭声，就没有再听见你的声音了。</p><!-- <div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":"yes","screenshot":"yes","video":{"url":"https://cdn.cnbj1.fds.api.mi-img.com/product-images/xiaomi-shouhuan-8jm0thp/index/v1-2.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/","token":"tokendemo"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> --><div class="video-container"><iframe src="https://player.vimeo.com/video/855652843" frameborder="0" loading="lazy" allowfullscreen></iframe></div><!-- <div class="bili_video"><iframe class="bilili-video" src="https://player.bilibili.com/player.html?aid=317418000&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" width="452" height="544" allowfullscreen="true"> </iframe></div> --><p>我着急的问着医生，这哭没哭呀，医生告诉我，哭过了，宝宝很漂亮。那时候的我迫不及待想看看你的样子，还不停的问医生你的性别。医生只是告诉我，让我等一下自己看。<br>医生剪了你的脐带，然后抱到我边边上，让我看完自己说出你的性别，看到你黑黑的、红红的也不哭，我向医生确认了，啊 是我的女儿！<br>她们给你擦干净身体，穿上了医院送的丑丑的衣服，躺在远远的床上，我看着你乖乖的在吐泡泡，向医生要了手机，赶紧分享给你爸爸，和在外面等着你到来的家人们。<br>￼<div class="img-wrap"><div class="img-bg"><img class="img" src="/gallery/yz20230323/0.jpg alt=对视"/></div></div><br>第一次见面，既熟悉又陌生。明明认识很久了，但却并没有什么感情。那一瞬间觉得一切发生的都好快，你前一天还在我的肚子里，一下子就跑到了我的眼前！医生把你抱到我的身边，我抱着你，好小好小一只，说不上来的感觉。直到开始让你尝试母乳，才觉得，啊 我们又重新连接上了！<br>￼<br><div class="img-wrap"><div class="img-bg"><img class="img" src="/gallery/yz20230323/1.jpg alt=对视"/></div></div><br>原来柚你的故事，也才刚刚开始！</p>]]></content>
      
      
      <categories>
          
          <category> 柚柚 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 柚柚 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你或许不知道的chrome调试技巧和方法</title>
      <link href="/gavin-blog.github.io/post/a221d1b6.html"/>
      <url>/gavin-blog.github.io/post/a221d1b6.html</url>
      
        <content type="html"><![CDATA[<h1 id="你或许不知道的-chrome-调试技巧和方法"><a href="#你或许不知道的-chrome-调试技巧和方法" class="headerlink" title="你或许不知道的 chrome 调试技巧和方法"></a>你或许不知道的 chrome 调试技巧和方法</h1><h2 id="从-Chrome-说起"><a href="#从-Chrome-说起" class="headerlink" title="从 Chrome 说起"></a>从 Chrome 说起</h2><hr><p>谷歌浏览器（通常简称为 <code>Chrome</code> ）是由谷歌开发的网络浏览器。 它于 2008 年首次针对 <code>Microsoft Windows</code> 发布,后来移植到 <code>Linux</code> ,<code>macOS</code> ,<code>iOS</code> 和 <code>Android</code> 。 浏览器也是 <code>Chrome OS</code> 的主要组件,它可以作为 <code>Web</code> 应用的平台。<a href="https://link.juejin.cn/?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FGoogle_Chrome">Chrome-wikipedia</a></p><p>浏览器的市场天下三分,<code>Chorme</code>,<code>Safari</code>和<code>FireFox</code>,从 2008 年 <code>Chrome</code> 横空出世以来,如今已经一家独大占据了半壁江山</p><p>对于大部分人来说,<code>Chrome</code> 可能只是个浏览器,但是对于开发人员来说,它更是一个强大无比的工具,为了方便开发人员调试代码,主流的浏览器都内置了 <code>DevTools</code>, 所以无论你是前端还是后端,掌握 <code>Chrome</code> 的调试技巧意味着效率直接的提高,主要介绍的就是 <code>Chrome-DevTools</code> 的使用技巧。</p><h2 id="DevTools简介"><a href="#DevTools简介" class="headerlink" title="DevTools简介"></a><code>DevTools</code>简介</h2><p><a href="https://developer.chrome.com/docs/devtools/#_1">Chrome DevTools</a>部分说明,也可以选择跳转到原链接访问,记录了 <code>chrome-devtools</code> 的一些基础概念。</p><h2 id="了解面板"><a href="#了解面板" class="headerlink" title="了解面板"></a>了解面板</h2><ol><li>元素面板 Elements</li></ol><p>使用元素面板可以自由的操作 <code>DOM</code> 和 <code>CSS</code> 来迭代布局和设计页面。</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221108202324845.png" alt="image-20221108202324845" style="zoom:60%;" /></p><ul><li><p>检查和调整页面</p></li><li><p>编辑样式</p></li><li>编辑 <code>DOM</code></li></ul><ol><li>控制台面板 Console</li></ol><p>在开发期间,可以使用控制台面板记录诊断信息,或者使用它作为 <code>shell</code> 在页面上与 <code>JavaScript</code> 交互。</p><ul><li><p>使用控制台面板</p></li><li><p>命令行交互</p><p>  <img src="/gavin-blog.github.io/img/浏览器/调试/image-20221108202557280.png" alt="image-20221108202557280" style="zoom:60%;" /></p></li></ul><ol><li>源代码面板 Sources</li></ol><p>在源代码面板中设置断点来调试 <code>JavaScript</code> ,或者通过 <code>Workspaces</code>（工作区）连接本地文件来使用开发者工具的实时编辑器</p><ul><li><p>断点调试</p></li><li><p>调试混淆的代码</p></li><li><p>使用开发者工具的 <code>Workspaces</code>（工作区）进行持久化保存</p><p>  <img src="/gavin-blog.github.io/img/浏览器/调试/image-20221108202748299.png" alt="image-20221108202748299" style="zoom:60%;" /></p></li></ul><ol><li>网络面板 Network</li></ol><p>使用网络面板了解请求和下载的资源文件并优化网页加载性能。</p><ul><li><p>网络面板基础</p></li><li><p>了解资源时间轴</p></li><li><p>网络带宽限制</p><p>  <img src="/gavin-blog.github.io/img/浏览器/调试/image-20221108202816122.png" alt="image-20221108202816122" style="zoom:60%;" /></p></li></ul><ol><li>性能面板 Performance</li></ol><p>使用时间轴面板可以通过记录和查看网站生命周期内发生的各种事件来提高页面的运行时性能。</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221108202849241.png" alt="image-20221108202849241" style="zoom:60%;" /></p><ol><li>内存面板 Memory</li></ol><p>如果需要比时间轴面板提供的更多信息,可以使用“配置”面板,例如跟踪内存泄漏。</p><ul><li><p><code>JavaScript</code> CPU 分析器</p></li><li><p>内存堆区分析器</p><p>  <img src="/gavin-blog.github.io/img/浏览器/调试/image-20221108203027697.png" alt="image-20221108203027697" style="zoom:60%;" /></p></li></ul><ol><li>应用面板 Application</li></ol><p>使用资源面板检查加载的所有资源,包括 <code>IndexedDB</code> 与 <code>Web SQL</code> 数据库,本地和会话存储,<code>cookie</code> ,应用程序缓存,图像,字体和样式表</p><ul><li><p>管理数据</p><p>  <img src="/gavin-blog.github.io/img/浏览器/调试/image-20221108203059889.png" alt="image-20221108203059889" style="zoom:60%;" /></p></li></ul><ol><li>安全面板 Security</li></ol><p>使用安全面板调试混合内容问题,证书问题等等。</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221108203241022.png" alt="image-20221108203241022" style="zoom:60%;" /></p><ol><li>lightHouse</li></ol><p>lighthouse 可以检测网页的质量,分别针对网页的<code>Performance</code>,<code>Accessibility</code>、<code>Best</code> <code>Practices</code>、<code>SEO</code>进行检测评分,并给出相应的优化建议,方便站长优化网页的加载速度、搜索引擎排名等。<br><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221109170057413.png" alt="image-20221109170057413"></p><ul><li><p><code>Performance</code> - 性能检测,如网页的加载速度、响时间等</p></li><li><p><code>Accessibility</code> - 铺助检测,如网页的可访问性问题,HTML 代码标签之类的优化等</p></li><li><p><code>Best Practices</code> - 实践性检测,如网页安全性,如是否开启 HTTPS、网页存在的漏洞等</p></li><li><p><code>SEO</code> - 搜索引擎优化检测,如网页 title 是否符合搜索引擎的优化标准等</p></li></ul><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221109171020830.png" alt="image-20221109171020830"></p><ol><li>Recorder</li></ol><p>可以帮助我们录制,回放,测试用户操作;</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221109173925573.png" alt="image-20221109173925573"></p><ol><li><p>Performance insights</p><p>对网站的性能进行可操作的洞察</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221109180412062.png" alt="image-20221109180412062"></p><p>相比较现有的性能面板,主要解决一些痛点：</p><ul><li><p>太多的信息在同一个面板,重新设计了 ui,简化了面板,划分了对应的区域;</p></li><li><p>需要深入了解浏览器的工作原理且如何有效使用的专业知识;</p></li><li><p>查看 Web Vitals 性能指标具体可在<a href="https://web.dev/vitals/#core-web-vitals">Web Vitals </a>查看;</p></li></ul><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221109204029081.png" alt="image-20221109204029081"></p><ul><li><strong><a href="https://web.dev/lcp/">Largest Contentful Paint (LCP)</a></strong> :最大内容绘制,测量加载性能.为了提供良好的用户体验,LCP 应在页面首次开始加载后的<strong>2.5 秒</strong>内发生.</li><li><strong><a href="https://web.dev/fid/">First Input Delay (FID)</a></strong> ：首次输入延迟,测量交互性.为了提供良好的用户体验,页面的 FID 应为<strong>100 毫秒</strong>或更短。</li><li><strong><a href="https://web.dev/cls/">Cumulative Layout Shift (CLS)</a></strong> ：累积布局偏移,测量视觉稳定性.为了提供良好的用户体验,页面的 CLS 应保持在 <strong>0.1.</strong> 或更少.</li></ul></li><li><p><strong>CSS Overview</strong></p></li></ol><p>开启 CSS Overview 面板之后，就可以查看当前网站的样式信息了，包括颜色信息、字体信息、媒体查询等。当我们需要优化页面的 CSS 时，这个功能就派上用场了。除此之外，还可以使用该功能方便地查看其他优秀网站的样式信息。</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221115142347701.png" alt="image-20221115142347701" style="zoom:50%;" /></p><h2 id="copying-amp-saving"><a href="#copying-amp-saving" class="headerlink" title="copying &amp; saving"></a>copying &amp; saving</h2><ol><li><code>copy()</code></li></ol><p>可以通过全局的方法 <code>copy()</code> 在 <code>console</code> 里 <code>copy</code> 任何你能拿到的资源,包括一些些变量。例如 <code>copy($_)</code> 或 <code>copy($0)</code>;</p><ol><li><code>Store as global</code> (存储为一个全局变量)</li></ol><p>如果在 <code>console</code> 中打印了一堆数据 (例如在 <code>App</code> 中计算出来的一个数组) ,然后你想对这些数据做一些额外的操作比如我们刚刚说的 <code>copy</code> (在不影响它原来值的情况下) 。 那就可以将它转换成一个全局变量,只需要 <strong>右击</strong> 它,并选择 “<code>Store as global variable</code>” (保存为全局变量) 选项。</p><p>第一次使用的话,它会创建一个名为 <code>temp1</code> 的变量,第二次创建 <code>temp2</code>,第三次 … 。通过使用这些变量来操作对应的数据,不用再担心影响到他们原来的值</p><ol><li>保存堆栈信息( <code>Stack trace</code> )</li></ol><p>大多数情况下都不是一个人开发一个项目,而是一个团队协作,那么 <strong>如何准确的描述问题,就成为了沟通的关键</strong> ,这时候 <code>console</code> 打印出来的堆栈跟踪的信息对你和同事来说就起大作用了,可以省去很多沟通成本,所以你可以直接把堆栈跟踪的信息保存为一个文件,而不只是截图发给对方;</p><ol><li>直接<code>Copy HTML</code></li></ol><p>几乎所有人都知道,右击或者点击在 <code>HTML</code> 元素边上的省略号 (…) 就可以将它 <code>copy</code> 到剪贴板中</p><p>,但是你或许不知道的是：古老的<code>[ctrl] + [c]</code>大法依旧可用！</p><ol><li><code>table(),keys(),values()</code></li></ol><h2 id="快捷键和通用技巧"><a href="#快捷键和通用技巧" class="headerlink" title="快捷键和通用技巧"></a>快捷键和通用技巧</h2><ol><li><p><strong>切换 DevTools 窗口的展示布局</strong></p><p>一般我在使用 <code>DevTools</code> 时, <code>dock</code> 的展示窗口都在底部 ,但是有时候我想把 <code>dock</code> 的窗口 切换到右边。</p><p>怎么做呢？</p><p>这时就可以通过 <code>DevTools</code> 的下拉菜单,或者命令菜单…或者使用一个快捷键 <code>ctrl + shift + D</code> (<code>⌘ + shift + D</code> Mac) 来实现位置的切换（通常是从 <code>开始的位置</code> 到 <code>右边位置</code>, 但是如果一开始就是 <code>右边的位置</code> 那么会切换到 <code>左边的位置</code>.</p></li><li><p><strong>切换 <code>DevTools</code> 的面板</strong></p><p>如果可以的话,不喜欢使用鼠标的话,日常开发中,我们常需要从 <code>元素面板</code> 跳转到 <code>资源面板</code> 并返回,这样往返的来调试我们的代码,怎么来节省鼠标点击的时间呢：</p><ul><li>按下 <code>ctrl + [</code> 和 <code>⌘ + ]</code> 可以从当前面板的分别向左和向右切换面板。</li><li>按下 <code>ctrl + 1</code> 到 <code>`⌘ + 9</code>可以直接转到编号<code>1</code>…<code>9</code>的面板(<code>ctrl + 1</code>转到元素面板,<code>⌘ + 4</code> 转到 网络信息面板等等)</li></ul><p><strong>注意</strong> 第二组快捷键默认被禁用了。可以通过 <code>DevTools</code>&gt;&gt;<code>Settings</code> &gt;&gt;<code>Preferences</code>&gt;&gt;<code>*Appearance*</code> 打开这个选项：</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221112134655504.png" alt="image-20221112134655504" style="zoom:50%;" /></p></li><li><p><strong>递增/递减</strong></p><p>这个操作调整样式是最有用的：通过使用 <code>带有</code> 或者 <code>不带有修饰键</code> 的 <code>上</code> / <code>下</code> 箭头按键, 可以实现递增和递减 <code>0.1</code> , <code>1</code> 或者 <code>10</code> 这样数值类型的值。</p><p>Ps:甚至对颜色都起作用！（虽然没什么卵用,但是有时候真的可以很起作用~）</p><ul><li>增量 0.1<ul><li>Mac： Option +向上和 Option +向下</li><li>Windows： Alt +向上和 Alt +向下</li></ul></li><li>增量 1<ul><li>Mac：向上+向下</li><li>Windows：向上+向下</li></ul></li><li>增量 10<ul><li>Mac：⇧+向上和 ⇧+向下</li><li>Windows：⇧+向上和 ⇧+向下</li></ul></li><li>递增 100<ul><li>Mac： ⌘+向上和 ⌘+向下</li><li>Windows： Ctrl +向上和 Ctrl +向下</li></ul></li></ul></li><li><p><strong>elements, logs, sources &amp; network 中的查找</strong></p><p><code>DevTools</code> 中的前 4 个主要的面板,每一个都支持 <code>[ctrl] + [f]</code> 快捷方式,使用对应的查询方式来查找信息:</p><ul><li><p>在 <code>Elements</code> 面板中 - 通过 <code>string</code> ,选择器 或者 <a href="https://www.w3cschool.cn/xpath/xpath-syntax.html">XPath</a> 来查找</p></li><li><p>而在 <code>Console</code>, <code>Network</code> 以及 <code>Source</code> 面板 - 通过区分大小写,或者可以被视为表达式的 <code>strings</code>, 来查找</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221112171912925.png" alt="image-20221112171912925" style="zoom:50%;" /></p></li></ul></li></ol><h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><p><code>Command</code> 菜单可以帮助我们快速找到那些被隐藏起来的功能.</p><ul><li><p>在 <code>Chrome</code> 的调试打开的情况下 按下 [ <code>Ctrl]</code>+<code>[Shift]</code>+<code>[P]</code>(Mac：<code>[⌘]</code>+<code>[Shift]</code>+ <code>[P]</code> )</p></li><li><p>或者使用 <code>DevTools</code> 的 <code>dropdown</code> 按钮下的这个选项:</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221112180350838.png" alt="image-20221112180350838" style="zoom:50%;" /></p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221112180410219.png" alt="image-20221112180410219"></p><ol><li><p><strong>截屏新姿势</strong></p><p>当你只想对一个特别的 <code>DOM</code> 节点进行截图时,你可能需要使用其他工具弄半天,但现在你直接选中那个节点,打开 <code>Command</code> 菜单并且使用 <strong>节点截图</strong> 的就可以了。</p><p>不只是这样,你同样可以用这种方式 <strong>全屏截图</strong> - 通过 <code>Capture full size screenshot</code> 命令。注意,这里说的是全屏,并不是嵌入页面的一部分。</p><ul><li><code>area screenshot</code>：截取自选区域；</li><li><code>full size screenshot</code>：截取整个网页；</li><li><code>node screenshot</code>：截取当前节点；</li><li><code>screenshost</code>：截取当前屏幕。</li></ul></li><li><p><strong>快速切换面板</strong></p><p><code>DevTools</code> 使用双面板布局,形式一般是：<code>元素面板</code> + <code>资源面板</code> ,它根据屏幕可用的部分,经常将不同面板横向或者纵向的排列,以适合阅读的方式展示出来。但有时候我们并不喜欢默认的布局。</p><p>你是否想过要重置 <code>DevTools</code> 呢？将 <code>样式面板</code> 从 <code>html预览</code> 的底部移动到右边或者周围其他的位置呢？是的,这就是下面要介绍的 😉</p><p>打开 <code>Commands</code> 菜单并且输入 <code>layout</code> ,你会看到 <code>2</code> 到 <code>3</code> 个可供选择的项(这里不再显示你已经激活的选项)：</p><ul><li><p>使用横向面板布局</p></li><li><p>使用纵向面板布局</p></li><li><p>使用自动面板布局</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221112182352083.png" alt="image-20221112182352083" style="zoom:50%;" /></p></li></ul></li><li><p><strong>快速切换主题</strong></p><p>在 <code>Commands</code> 菜单中寻找与 <code>theme</code> 相关的选项,实现 <code>明亮</code> &amp; <code>暗黑</code> 两种主题之间的切换：</p></li></ol></li></ul><h2 id="代码块的使用"><a href="#代码块的使用" class="headerlink" title="代码块的使用"></a>代码块的使用</h2><p><a href="https://github.com/bgrins/devtools-snippets/tree/master/snippets">snippets</a></p><p>比方说,京东淘宝之类的的自动化签到,还有一些开发者之类的小工具;</p><ul><li>统计页面颜色,输出使用的颜色和次数,方便和 ui 图的颜色比对,以及确认 css 颜色配置和使用是否一致;</li><li>可让将网页上的所有图像和画布转换为 base64,方便查看和后期使用;</li></ul><p>适用于脚本并没有花费太多的精力来编写,但也只是偶尔运行一下,所以 <code>Snippets</code> 的用武之地,它允许存放 <code>JavaScript</code> 代码到 <code>DevTools</code> 中,方便复用这些 <code>JavaScript</code> 代码块;</p><p>进入到 <code>Sources</code> 面板,在导航栏里选中 <code>Snippets</code> 这栏,点击 <code>New snippet(新建一个代码块)</code> ,然后输入你的代码之后保存,之后可以通过右击菜单或者快捷键： <code>[ctrl] + [enter]</code> 来运行它了.</p><p><code>DevTools</code> 中预设了代码块以后,甚至都不必再通过 <code>Sources</code> 来运行,可直接使用 <code>Command Menu</code> 输入框中输入 <code>!</code> +名字运行即可;</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221112211619246.png" alt="image-20221112211619246" style="zoom:50%;" /></p><h2 id="console-中的-‘-’"><a href="#console-中的-‘-’" class="headerlink" title="console 中的 ‘$’"></a>console 中的 ‘$’</h2><ol><li><p><strong><code>$0</code></strong></p><p>在 <code>Chrome</code> 的 <code>Elements</code> 面板中, <code>$0</code> 是对我们当前选中的 <code>html</code> 节点的引用。</p><p>理所当然,<code>$1</code> 是对上一次选择的节点的引用,<code>$2</code> 是对在那之前选择的节点的引用,等等。一直到 <code>$4</code></p><p>( <code>$1.appendChild($0)</code>)</p></li><li><p><strong><code>$ 和 ?</code></strong></p><p>如果没有在 <code>App</code> 中定义过 <code>$</code> 变量 (例如 <code>jQuery</code> )的话,它在 <code>console</code> 中就是对这一大串函数 <code>document.querySelector</code> 的别名。</p><p>如果是 <code>?</code> ,还能节省更多的时间,因为它不仅执行 <code>document.QuerySelectorAll</code> 并且它返回的是：一个节点的 <strong>数组</strong> ,而不是一个 <code>Node list</code></p><p>本质上来说 <code>Array.from(document.querySelectorAll(&#39;div&#39;)) === ?(&#39;div&#39;)</code></p></li><li><p><strong><code>$_</code></strong></p><p><code>$_</code> 是对上次执行的结果的 <strong>引用</strong></p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221115195757998.png" alt="image-20221115195757998" style="zoom:50%;" /></p></li><li><p><strong><code>$i</code></strong></p><p>现在的前端开发过程,离不开各种 <code>npm</code> 插件,但你可能没有想过,有一天我们竟然可以在 <code>Dev Tools</code> 里面来使用 <code>npm</code> 插件！</p><p>有时你只是想玩玩新出的 <code>npm</code> 包,现在不用再大费周章去建一个项目测试了,只需要在 <a href="https://chrome.google.com/webstore/detail/console-importer/hgajpakhafplebkdljleajgbpdmplhie/related">Chrome 插件:Console Importer</a> 的帮助之下,快速的在 <code>console</code> 中引入和测试一些 <code>npm</code> 库。</p><p>运行 <code>$i(&#39;lodash&#39;)</code> 或者 <code>$i(&#39;moment&#39;)</code> 几秒钟后,你就可以获取到 <code>lodash / momentjs</code> 了:</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113005451221.png" alt="image-20221113005451221"></p></li></ol><h2 id="console-log-的-“bug”"><a href="#console-log-的-“bug”" class="headerlink" title="console.log 的 “bug” ?"></a>console.log 的 “bug” ?</h2><p>一般来说,我们会使用 <code>console.log()</code> 来打印某个对象,并且,两次打印之间,还会对这个对象进行修改,最后我们查看打印的结果发现,修改前的打印和修改后的打印,竟然是一样的？这样出乎意料的情况,让我们难以继续 <code>console.log</code> 的调试。</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113005617464.png" alt="image-20221113005617464" style="zoom:50%;" /></p><p><strong><code>console</code> 中打印出的对象,在你打印出他内容之前,是以引用的方式保存的,WebKit 的 console.log 并没有立即拍摄对象快照,相反,它只存储了一个指向对象的引用,然后在代码返回事件队列时才去拍摄快照。 —《JavaScript 异步编程》<br>也就是说,WebKit 内核的 Chrome 浏览器 的控制台对应引用类型的数据读取是默认值读取一层数据,当你点击展开时,会再去堆内存中读取属性值和下一层的数据</strong>.</p><p>所以有时候用到 console.log 调试的时候</p><ul><li>打印一个从这个对象复制出来的对象。</li><li>使用资源面中的断点来调试</li><li>使用 <code>JSON.stringify()</code> 方法处理打印的结果</li></ul><h2 id="异步的-console"><a href="#异步的-console" class="headerlink" title="异步的 console"></a>异步的 console</h2><p>如今，越来越多与浏览器有关的 API 都是 <em>基于 <code>Promise</code> 的</em> 。当使用 <code>promise</code> 的时候通常配套用 <code>.then(处理方法)</code> 或者 将 <code>promise</code> 包裹在 <code>async</code> 方法中，再使用 <code>await</code> 来接收结果。</p><p>我们在 <code>JavaScript/TypeScript</code> 中大量使用的东西，但如果在 <code>Console</code> 中书写这样的结构很不方便。</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113135528598.png" alt="image-20221113135528598" style="zoom:50%;" /></p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113135544718.png" alt="image-20221113135544718" style="zoom:50%;" /></p><p><strong>其实 <code>console</code> 默认就被 <code>async</code> 包裹</strong></p><p><code>res = await fetch(&#39;https://jsonplaceholder.typicode.com/todos/1&#39;);json = await res.json();</code></p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113135752811.png" alt="image-20221113135752811" style="zoom:50%;" /></p><ol><li><p>异步 console 可以查看很多可用的<a href="https://developer.mozilla.org/en-US/docs/Web/API">webApi</a>,<a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator">navigator</a></p><ul><li><p><code>Storage</code> 系统的 <strong>占用数</strong> 和 <strong>空闲数</strong> <code>await navigator.storage.estimate()</code></p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113135935801.png" alt="image-20221113135935801" style="zoom:50%;" /></p></li><li><p>设备的 <strong>电池信息</strong></p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113140314240.png" alt="image-20221113140314240" style="zoom:50%;" /></p></li></ul></li></ol><h2 id="Ninja-console-log-（忍者打印"><a href="#Ninja-console-log-（忍者打印" class="headerlink" title="Ninja console.log （忍者打印)"></a>Ninja console.log （忍者打印)</h2><p>有时设置的断点是不是被执行了太多次？假设有一个包含 <code>200</code> 个元素的循环，但是只对第 <code>110</code> 次循环的结果感兴趣，又或者只对一些满足某些条件的结果感兴趣，怎么办呢？条件断点来解决</p><ol><li><p><strong><code>Conditional breakpoints 条件断点</code></strong></p><p>这样的情况下，可以设置一个条件断点：</p><ul><li>右击行号，选择 <code>Add conditional breakpoint...(添加条件断点)</code></li><li>或者右击一个已经设置的断点并且选择 <code>Edit breakpoint(编辑断点)</code></li><li>然后输入一个执行结果为 <code>true</code> 或者 <code>false</code> 的表达式（它的值其实不需要完全为 <code>true</code> 或者 <code>false</code> 尽管那个弹出框的描述是这样说的）。</li></ul><p>在这个表达式中可以使用任何这段代码可以获取到的值（当前行的作用域）。</p><p>如果条件成立，这个断点就会暂停代码的执行</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113143849592.png" alt="image-20221113143849592" style="zoom:50%;" /></p></li><li><p><strong>The ninja（忍者） console.log</strong></p><p>得益于条件断点</p><ul><li>每一个条件都必须经过判断 - 当应用执行到这一行的时候进行判断</li><li>并且如果条件返回的是 <code>falsy</code> 的值(这里的 <code>falsy</code>并非是笔误，<code>falsy</code> 指的是被判定为 <code>false</code> 的值，例如 <code>undefined</code> )，它并不会暂停..</li></ul><p>与其在你的源码的不同地方去添加 <code>console.log</code> / <code>console.table</code> / <code>console.time</code> 等等，不如你直接使用条件判断来将它们“连接”到 <code>Source</code> 面板中。 这样的话，它们会一直执行，并且当你不再需要它们的时候，在 <code>Breakpoints section</code> 会清晰的列出它们。点两下鼠标你就可以把所有的都移除，就像一堆忍者一样突然消失.后续通过这样的方式轻松将 <code>console logs</code> 插入到 <code>source</code> 里,避免忘记提交到生产环境;</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113144307355.png" alt="image-20221113144307355" style="zoom:50%;" /></p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113151913711.png" alt="image-20221113151913711" style="zoom:50%;" /></p></li></ol><h2 id="console-自定义格式转换器"><a href="#console-自定义格式转换器" class="headerlink" title="console - 自定义格式转换器"></a>console - 自定义格式转换器</h2><p>大多数的情况下，我们习惯使用 <code>DevTools</code> 的 <code>console</code> 默认对 <code>object</code> 的转换，但有时候我们想用与众不同的方式来处理。 那我们就可以自定义输出对象的函数，它通常被称为 <code>Custom Formatter</code> 。</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113152201209.png" alt="image-20221113152201209" style="zoom:50%;" /></p><p><code>formatter</code> 是一个对象，最多包含三个方法：</p><ul><li><code>header</code> : 处理如何展示在 <code>console</code> 的日志中的主要部分。</li><li><code>hasbody</code> : 如果你想显示一个用来展开对象的 <code>▶</code> 箭头，返回 <code>true</code></li><li><code>body</code> : 定义将会被显示在展开部分的内容中。</li></ul><p>一个基础的自定义 <code>formatter</code></p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113152309306.png" alt="image-20221113152309306" style="zoom:50%;" /></p><p><code>header</code> 方法返回了一个 <a href="https://link.juejin.cn/?target=http%3A%2F%2Fwww.jsonml.org%2F">JsonML</a> (注： <code>JsonML</code> : <code>JSON Markup Language</code> - <code>JSON</code> 标记语言) 数组，由这些组成：</p><ol><li>标签名</li><li>属性对象</li><li>内容 (文本值或者其他元素)</li></ol><p>在输出的时候，这个简单的 <code>formatter</code> 对于每一层嵌套，直接以 <code>7</code> 个空格的缩进打印这个对象。</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113153403267.png" alt="image-20221113153403267" style="zoom:50%;" /></p><p><strong>自定义格式化转换器的应用实践</strong></p><p>可以在这个 <a href="https://github.com/andrewdavey/immutable-devtools">immutable-devtools </a>仓库中找到对于 <a href="https://immutable-js.com/#getting-started">Immutable.js</a> 结构的完美展示。</p><p><strong>vue3 中的应用</strong></p><p>在输出日志的方向，Vue 也做了相应的开发优化，对于 Vue 内部声明的数据接口，如 ref，如果想要在控制台直接的打印结果</p><ul><li><p>打开前输出</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113155647163.png" alt="image-20221113155647163" style="zoom:50%;" /></p></li><li><p>打开后输出</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113155622499.png" alt="image-20221113155622499" style="zoom:50%;" /></p></li></ul><h2 id="console-console-中’’骚’’操作"><a href="#console-console-中’’骚’’操作" class="headerlink" title="console - console 中’’骚’’操作"></a>console - console 中’’骚’’操作</h2><p><code>console.log</code> ，大部分情况用它调试，但是，在不同的场景下，除了 <code>log</code> ，其实有更好的选择;</p><ol><li><p><strong>console.assert</strong></p><p>当我们传入的第一个参数为 <strong>假</strong> 时，<code>console.assert</code> 打印跟在这个参数后面的值。</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113163812973.png" alt="image-20221113163812973" style="zoom:50%;" /></p><p>摆脱讨厌的 <code>if</code> 表达式，还可以获得堆栈信息。</p></li><li><p><strong>保留 console 日志</strong></p><p>刷新完页面之后，通常控制台的 Console 面板就会被清空。如果想保留控制台的日志，就可以在设置中勾选 Preserve log 选项以保留控制台中的日志。</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221115140702163.png" alt="image-20221115140702163" style="zoom:50%;" /></p></li><li><p><strong>增强 log 的阅读体验</strong></p><p><code>console.log</code> 一个简单的变量，可能会忘记（或混淆）哪一个是那个.</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113164433738.png" alt="image-20221113164433738"></p><p>再 <code>console.log</code> 的参数包装在大括号中，所以加上 <code>&#123;&#125;</code> ,清晰明了;</p></li><li><p><strong>console.table</strong></p><p>如果有一个 <strong>数组</strong> (或者是 <strong>类数组</strong> 的对象，或者就是一个 <strong>对象</strong> )需要打印，你可以使用 <code>console.table</code> 方法将它以一个漂亮的表格的形式打印出来。它不仅会根据数组中包含的对象的所有属性，去计算出表中的列名，而且这些列都是可以 <strong>缩放</strong> 甚至 <strong>还可以排序</strong></p><p>如果你觉得展示的列太多了，使用第二个参数，传入你想要展示的列的名字:</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113164936636.png" alt="image-20221113164936636"></p></li><li><p><strong>table 和 {} 的配合</strong></p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113165421084.png" alt="image-20221113165421084" style="zoom:50%;" /></p></li><li><p><strong>console.dir</strong></p><p>有时候要打印一个 <code>DOM</code> 节点。 <code>console.log</code> 会将这个交互式的元素渲染成像是从 <code>Elements</code> 中剪切出来的一样。如果说你想要查看 <strong>这个节点所关联到的真实的 js 对象</strong> 呢？并且想要查看他的 <strong>属性</strong> ;</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113165645590.png" alt="image-20221113165645590" style="zoom:50%;" /></p></li><li><p><strong>给 logs 加上时间戳</strong></p><p>开启 <em>timestamps</em> 。置(在调试工具中的 <code>⋮</code> 下拉中找到它，或者按下 <code>F1</code> )中来开启;</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113170134162.png" alt="image-20221113170134162" style="zoom:50%;" /></p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113170149884.png" alt="image-20221113170149884" style="zoom:50%;" /></p></li><li><p><strong>监测执行时间</strong></p><ul><li><code>console.time()</code> console.time(‘loading’) — 开启一个计时器</li><li><code>console.timeEnd()</code>console.timeEnd(‘loading’) — 结束计时并且将结果在 <code>console</code> 中打印出来</li><li>可加入标签,多事件记录的时候可以使用;</li></ul></li><li><p><strong>给 console.log 加上 CSS 样式</strong></p><p>如果你给打印文本加上 <code>%c</code> 那么 <code>console.log</code> 的第二个参数就变成了<code>CSS</code> 规则;</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113170745544.png" alt="image-20221113170745544"></p></li><li><p><strong>直接在回调中使用 console.log</strong></p></li></ol><p>不仅减少了输入，还可能在回调中接收多个参数,更直观和优雅;</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113171544073.png" alt="image-20221113171544073"></p><ol><li><p><strong>使用实时表达式</strong></p><p>按下 “眼睛” 符号，定义任何 <code>JavaScript</code> 表达式。</p><p> <img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113173146426.png" alt="image-20221113173146426" style="zoom:50%;" /></p></li></ol><h2 id="Network-Network-的骚操作"><a href="#Network-Network-的骚操作" class="headerlink" title="Network - Network 的骚操作"></a>Network - Network 的骚操作</h2><ol><li><p><strong>隐藏 overview 面板</strong></p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113174721254.png" alt="image-20221113174721254" style="zoom:50%;" /></p></li><li><p><strong>Request initiator 显示了调用堆栈信息</strong></p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113173656270.png" alt="image-20221113173656270" style="zoom:50%;" /></p></li><li><p><strong>请求过滤</strong></p><p><code>Network</code> 面板中的过滤器输入框接受字符串或正则表达式，对应显示匹配的请求。 使用它来过滤很多属性。</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113174356529.png" alt="image-20221113174356529" style="zoom:50%;" /></p></li><li><p><strong>自定义请求表</strong></p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113174308667.png" alt="image-20221113174308667" style="zoom:50%;" /></p></li><li><p><strong>重新发送 <code>XHR</code> 的请求</strong></p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113174501327.png" alt="image-20221113174501327" style="zoom:50%;" /></p></li><li><p><strong>XHR/fetch 断点</strong></p><p>在某一特定时刻，对已发送的 <code>“ajax”</code> 请求进行捕获 可以使用 <code>XHR/fetch breakpoint</code> 。</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113175019961.png" alt="image-20221113175019961" style="zoom:50%;" /></p></li></ol><h2 id="元素面板-技巧集合"><a href="#元素面板-技巧集合" class="headerlink" title="元素面板 - 技巧集合"></a>元素面板 - 技巧集合</h2><ol><li><p>H: 隐藏／显示元素</p></li><li><p>Ctrl + Shift + Z: 撤销所有修改<br>CMD + Z: 撤销上次修改</p><p>CMD+⬇ 或 ⬆ 移动元素</p></li><li><p>Shadow editor 阴影编辑器: box-shadow 或 text-shadow 属性的阴影方形符号</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113180358574.png" alt="image-20221113180358574" style="zoom:50%;" /><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113180412856.png" alt="image-20221113180412856" style="zoom:50%;" /><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113180428632.png" alt="image-20221113180428632" style="zoom:50%;" /></p></li><li><p>展开所有的子节点: expand recursively 命令(Mac 按住 option+点击左边箭头,windows:alt 键)</p></li></ol><h2 id="元素面板-颜色选择器"><a href="#元素面板-颜色选择器" class="headerlink" title="元素面板 - 颜色选择器"></a>元素面板 - 颜色选择器</h2><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221113181129256.png" alt="image-20221113181129256" style="zoom:50%;" /></p><p>打开一个文本的调色选择器(是 <code>color</code> 属性， 而不是 <code>background-color</code>) 就会看到<code>Contrast ratio</code>显示了 <strong>文本的颜色</strong> 与 <strong>开发者工具认为这段文本应该有的背景颜色</strong> 之间的对比度。如果这个数值很高，那么你的文本相对于背景来说，更显而易见，但如果这个值接近 <code>1</code> ，那么文本的颜色几乎不能从背景色中区分.</p><h2 id="Drawer-Drawer"><a href="#Drawer-Drawer" class="headerlink" title="Drawer - Drawer"></a>Drawer - Drawer</h2><p>在 <code>DevTools</code>（任何选项卡）中时，按 <code>[esc]</code> 来显示，再次按 <code>[esc]</code> 隐藏</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221114104933951.png" alt="image-20221114104933951" style="zoom:50%;" /></p><ol><li><p><strong>Quick Source</strong></p><p>没有 <code>“主”Source</code> 面板的花里胡哨的功能，如果断点被触发，不会显示在 <code>drawer</code> 的 <code>Quick sources</code> 中，而是显示在主 <code>Source</code> 中。对于 <code>快速查看代码</code> ，或者 <code>设置断点</code> 来说，非常快捷好用;</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221114110029088.png" alt="image-20221114110029088" style="zoom:50%;" /></p></li><li><p><strong>Changes</strong></p><p>类似于 git,如果在 chrome 的调试工具中改动了文件,会有比对提醒;</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221114153400676.png" alt="image-20221114153400676" style="zoom:50%;" /></p></li><li><p><strong>Animations</strong></p><p>当页面的动画执行时，就会在时间轨道上查看所有的动画，点击其中一个动画可以懂得执行过程以及时间轴</p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221115141334447.png" alt="image-20221115141334447" style="zoom:50%;" /></p><p>可以在时间轴上定位到任一时刻的动画帧，也可以拖动左右两端的圆点来修改动画的延迟和周期，修改之后可以在属性面板看到对应的 CSS 样式。</p></li><li><p><strong>Rendering</strong></p><p>开启 Rendering（渲染）选项后，开启 <code>Paint flashing</code>：页面中绿色透明高亮区域就是重绘区域,查看页面在执行操作时哪些元素会发生重绘,帮助我们更好的优化代码以及 css;</p></li></ol><h2 id="Workspace-workspace-技巧"><a href="#Workspace-workspace-技巧" class="headerlink" title="Workspace - workspace 技巧"></a>Workspace - workspace 技巧</h2><ol><li><p><strong>在 Chrome 中修改的文件</strong></p><p><img src="/gavin-blog.github.io/img/浏览器/调试/image-20221114113631380.png" alt="image-20221114113631380" style="zoom:50%;" /></p></li><li><p><strong>Workspace 支持即时同步样式</strong></p><p>一旦设置好了 <code>DevTools workspace</code>，就可以在 <code>Sources</code> 面板中编辑 <code>HTML</code> 和 <code>JavaScript</code>（或者是 <code>TypeScript</code>，如果你有<code>sourcemaps</code>）文件，按 <code>ctrl + s</code> 后它将被保存 在文件系统中。</p></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>*DevTools 是一款功能强大的软件,很容易被忽视, 它隐藏着许多我们甚至常常怀疑是否需要的那些功能”</p><p>所以,无论如何,学无止境</p><ol><li><p>Google Chrome Developers</p><p>推荐订阅 <code>Google Chrome Developers</code> 的 <code>YouTube</code> 频道,这是在 <code>Chrome</code> 中展示已有的新内容的地方。 不仅如此,还可以去那里寻找有关最佳实践,<code>JavaScript</code> 演变等的讨论。</p><p><a href="https://www.youtube.com/channel/UCnUYZLuoy1rq1aVMwx4aTzw">Google Chrome Developers - YouTube</a></p></li><li><p>developer.chrome.com</p><p>查阅 <a href="https://developer.chrome.com/">developer.chrome.com</a> ,可以 （“按年”）或 技术（“按标签”）去查询一些有关特定更新的信息;</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
